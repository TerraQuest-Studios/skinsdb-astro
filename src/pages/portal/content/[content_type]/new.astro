---
import Layout from '../../../../layouts/portal.astro';
import {db} from '../../../../lib/db.js';
import {User} from '../../../../lib/user.js';
import {form} from '../../../../lib/form.js';
import '../../../../lib/string.js';

// @ts-ignore
const session = await Astro.locals.auth.validate();
// @ts-ignore
if (!session) return Astro.redirect("/login", 302);
let user = await new User(session.user.userId);
if(user.group.id!=1) {
	return new Response("permission denied", {status: 403}); //TODO: make this a 404 page - default or otherwise
}

// @ts-ignore
const { content_type, id } = Astro.params;
/* console.log(content_type);
console.log(id); */

let tableExists = await db.query(`SELECT * FROM information_schema.tables WHERE table_name=?`, ["content_" + content_type]);
//console.log(tableExists);
if(!tableExists[0]) {
	// @ts-ignore
	return new Response("content type not found", {status: 404}); //TODO: make this a 404 page - default or otherwise
}

if (Astro.request.method === "POST") {
	//TODO: validate input
	try {
		const data = await Astro.request.formData();
		let queryFields = [];
		let queryValues = [];
		
		for(var pair of data.entries()){
			//console.log(pair[0], pair[1]);
			queryFields.push(pair[0]);
			queryValues.push(pair[1]);
		}

		await db.query(`INSERT INTO ${tableExists[0].TABLE_NAME} (${queryFields.join(",")}) VALUES (${queryValues.map(() => "?").join(",")})`, queryValues);

		return Astro.redirect(`/portal/content/${content_type}`, 302);
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}

let tableSchema = await db.query(`SELECT * FROM information_schema.columns WHERE table_name=?`, ["content_" + content_type]);

let Form = new form(tableSchema, {author: session.user.userId}, `/portal/content/${content_type}/new`);
let FormMarkup = await Form.generate();
---

<Layout title={content_type.ucwords() + " Content"}>
	<h3 class="title is-3">New {content_type} item</h3>
	<Fragment set:html={FormMarkup}>
</Layout>